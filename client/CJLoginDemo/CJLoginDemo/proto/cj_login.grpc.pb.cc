// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/cj_login.proto

#include "cj_login.pb.h"
#include "cj_login.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace cjLogin {

static const char* CjLoginService_method_names[] = {
  "/cjLogin.CjLoginService/registerUser",
  "/cjLogin.CjLoginService/userLogin",
  "/cjLogin.CjLoginService/userCheckLogin",
  "/cjLogin.CjLoginService/userLogout",
  "/cjLogin.CjLoginService/logoutUser",
};

std::unique_ptr< CjLoginService::Stub> CjLoginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CjLoginService::Stub> stub(new CjLoginService::Stub(channel));
  return stub;
}

CjLoginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_registerUser_(CjLoginService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userLogin_(CjLoginService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userCheckLogin_(CjLoginService_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userLogout_(CjLoginService_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logoutUser_(CjLoginService_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CjLoginService::Stub::registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_registerUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* CjLoginService::Stub::AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* CjLoginService::Stub::PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, false);
}

::grpc::Status CjLoginService::Stub::userLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_userLogin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* CjLoginService::Stub::AsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>::Create(channel_.get(), cq, rpcmethod_userLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* CjLoginService::Stub::PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>::Create(channel_.get(), cq, rpcmethod_userLogin_, context, request, false);
}

::grpc::Status CjLoginService::Stub::userCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_userCheckLogin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* CjLoginService::Stub::AsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_userCheckLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* CjLoginService::Stub::PrepareAsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_userCheckLogin_, context, request, false);
}

::grpc::Status CjLoginService::Stub::userLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_userLogout_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* CjLoginService::Stub::AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>::Create(channel_.get(), cq, rpcmethod_userLogout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* CjLoginService::Stub::PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>::Create(channel_.get(), cq, rpcmethod_userLogout_, context, request, false);
}

::grpc::Status CjLoginService::Stub::logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_logoutUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginService::Stub::AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_logoutUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginService::Stub::PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_logoutUser_, context, request, false);
}

CjLoginService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginService::Service, ::cjLogin::RegisterUserRequest, ::cjLogin::RegisterUserResponse>(
          std::mem_fn(&CjLoginService::Service::registerUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginService::Service, ::cjLogin::UserLoginRequest, ::cjLogin::UserLoginResponse>(
          std::mem_fn(&CjLoginService::Service::userLogin), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginService_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginService::Service, ::cjLogin::UserCheckLoginRequest, ::cjLogin::UserCheckLoginResponse>(
          std::mem_fn(&CjLoginService::Service::userCheckLogin), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginService_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginService::Service, ::cjLogin::UserLogoutRequest, ::cjLogin::UserLogoutResponse>(
          std::mem_fn(&CjLoginService::Service::userLogout), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginService_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginService::Service, ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(
          std::mem_fn(&CjLoginService::Service::logoutUser), this)));
}

CjLoginService::Service::~Service() {
}

::grpc::Status CjLoginService::Service::registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginService::Service::userLogin(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginService::Service::userCheckLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginService::Service::userLogout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginService::Service::logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CjLoginCGI_method_names[] = {
  "/cjLogin.CjLoginCGI/registerUser",
  "/cjLogin.CjLoginCGI/login",
  "/cjLogin.CjLoginCGI/checkLogin",
  "/cjLogin.CjLoginCGI/logout",
  "/cjLogin.CjLoginCGI/connect",
};

std::unique_ptr< CjLoginCGI::Stub> CjLoginCGI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CjLoginCGI::Stub> stub(new CjLoginCGI::Stub(channel));
  return stub;
}

CjLoginCGI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_registerUser_(CjLoginCGI_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_login_(CjLoginCGI_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_checkLogin_(CjLoginCGI_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_logout_(CjLoginCGI_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_connect_(CjLoginCGI_method_names[4], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CjLoginCGI::Stub::registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_registerUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* CjLoginCGI::Stub::AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* CjLoginCGI::Stub::PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>::Create(channel_.get(), cq, rpcmethod_registerUser_, context, request, false);
}

::grpc::Status CjLoginCGI::Stub::login(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* CjLoginCGI::Stub::AsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>::Create(channel_.get(), cq, rpcmethod_login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* CjLoginCGI::Stub::PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>::Create(channel_.get(), cq, rpcmethod_login_, context, request, false);
}

::grpc::Status CjLoginCGI::Stub::checkLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_checkLogin_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* CjLoginCGI::Stub::AsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_checkLogin_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* CjLoginCGI::Stub::PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>::Create(channel_.get(), cq, rpcmethod_checkLogin_, context, request, false);
}

::grpc::Status CjLoginCGI::Stub::logout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_logout_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* CjLoginCGI::Stub::AsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>::Create(channel_.get(), cq, rpcmethod_logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* CjLoginCGI::Stub::PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>::Create(channel_.get(), cq, rpcmethod_logout_, context, request, false);
}

::grpc::ClientReader< ::cjLogin::ServerMessage>* CjLoginCGI::Stub::connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
  return new ::grpc::ClientReader< ::cjLogin::ServerMessage>(channel_.get(), rpcmethod_connect_, context, request);
}

::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* CjLoginCGI::Stub::AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* CjLoginCGI::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, request, false, nullptr);
}

CjLoginCGI::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginCGI_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginCGI::Service, ::cjLogin::RegisterUserRequest, ::cjLogin::RegisterUserResponse>(
          std::mem_fn(&CjLoginCGI::Service::registerUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginCGI_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginCGI::Service, ::cjLogin::UserLoginRequest, ::cjLogin::UserLoginResponse>(
          std::mem_fn(&CjLoginCGI::Service::login), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginCGI_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginCGI::Service, ::cjLogin::UserCheckLoginRequest, ::cjLogin::UserCheckLoginResponse>(
          std::mem_fn(&CjLoginCGI::Service::checkLogin), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginCGI_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginCGI::Service, ::cjLogin::UserLogoutRequest, ::cjLogin::UserLogoutResponse>(
          std::mem_fn(&CjLoginCGI::Service::logout), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginCGI_method_names[4],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< CjLoginCGI::Service, ::cjLogin::ConnectRequest, ::cjLogin::ServerMessage>(
          std::mem_fn(&CjLoginCGI::Service::connect), this)));
}

CjLoginCGI::Service::~Service() {
}

::grpc::Status CjLoginCGI::Service::registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginCGI::Service::login(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginCGI::Service::checkLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginCGI::Service::logout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginCGI::Service::connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CjLoginPushService_method_names[] = {
  "/cjLogin.CjLoginPushService/logoutUser",
  "/cjLogin.CjLoginPushService/userLogout",
  "/cjLogin.CjLoginPushService/connect",
};

std::unique_ptr< CjLoginPushService::Stub> CjLoginPushService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CjLoginPushService::Stub> stub(new CjLoginPushService::Stub(channel));
  return stub;
}

CjLoginPushService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_logoutUser_(CjLoginPushService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_userLogout_(CjLoginPushService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_connect_(CjLoginPushService_method_names[2], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CjLoginPushService::Stub::logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_logoutUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginPushService::Stub::AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_logoutUser_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginPushService::Stub::PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_logoutUser_, context, request, false);
}

::grpc::Status CjLoginPushService::Stub::userLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_userLogout_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginPushService::Stub::AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_userLogout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* CjLoginPushService::Stub::PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>::Create(channel_.get(), cq, rpcmethod_userLogout_, context, request, false);
}

::grpc::ClientReader< ::cjLogin::ServerMessage>* CjLoginPushService::Stub::connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
  return new ::grpc::ClientReader< ::cjLogin::ServerMessage>(channel_.get(), rpcmethod_connect_, context, request);
}

::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* CjLoginPushService::Stub::AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* CjLoginPushService::Stub::PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>::Create(channel_.get(), cq, rpcmethod_connect_, context, request, false, nullptr);
}

CjLoginPushService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginPushService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginPushService::Service, ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(
          std::mem_fn(&CjLoginPushService::Service::logoutUser), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginPushService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CjLoginPushService::Service, ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(
          std::mem_fn(&CjLoginPushService::Service::userLogout), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      CjLoginPushService_method_names[2],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< CjLoginPushService::Service, ::cjLogin::ConnectRequest, ::cjLogin::ServerMessage>(
          std::mem_fn(&CjLoginPushService::Service::connect), this)));
}

CjLoginPushService::Service::~Service() {
}

::grpc::Status CjLoginPushService::Service::logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginPushService::Service::userLogout(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CjLoginPushService::Service::connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace cjLogin

