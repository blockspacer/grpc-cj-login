// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/cj_login.proto
#ifndef GRPC_proto_2fcj_5flogin_2eproto__INCLUDED
#define GRPC_proto_2fcj_5flogin_2eproto__INCLUDED

#include "cj_login.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace cjLogin {

class CjLoginService final {
 public:
  static constexpr char const* service_full_name() {
    return "cjLogin.CjLoginService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status userLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>> AsyncuserLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>>(AsyncuserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>> PrepareAsyncuserLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>>(PrepareAsyncuserLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status userCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>> AsyncuserCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>>(AsyncuserCheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>> PrepareAsyncuserCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>>(PrepareAsyncuserCheckLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status userLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>> AsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>>(AsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>> PrepareAsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>>(PrepareAsyncuserLogoutRaw(context, request, cq));
    }
    virtual ::grpc::Status logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> AsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(AsynclogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> PrepareAsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(PrepareAsynclogoutUserRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>* AsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>* PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>* AsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>* PrepareAsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>* AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>* PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status userLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>> AsyncuserLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>>(AsyncuserLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>> PrepareAsyncuserLogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>>(PrepareAsyncuserLoginRaw(context, request, cq));
    }
    ::grpc::Status userCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>> AsyncuserCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>>(AsyncuserCheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>> PrepareAsyncuserCheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>>(PrepareAsyncuserCheckLoginRaw(context, request, cq));
    }
    ::grpc::Status userLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>> AsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>>(AsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>> PrepareAsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>>(PrepareAsyncuserLogoutRaw(context, request, cq));
    }
    ::grpc::Status logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> AsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(AsynclogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> PrepareAsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(PrepareAsynclogoutUserRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* AsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* PrepareAsyncuserLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* AsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* PrepareAsyncuserCheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_registerUser_;
    const ::grpc::RpcMethod rpcmethod_userLogin_;
    const ::grpc::RpcMethod rpcmethod_userCheckLogin_;
    const ::grpc::RpcMethod rpcmethod_userLogout_;
    const ::grpc::RpcMethod rpcmethod_logoutUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response);
    virtual ::grpc::Status userLogin(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response);
    virtual ::grpc::Status userCheckLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response);
    virtual ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response);
    virtual ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::cjLogin::RegisterUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::RegisterUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userLogin() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLogin(::grpc::ServerContext* context, ::cjLogin::UserLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userCheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userCheckLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_userCheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userCheckLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserCheckLogin(::grpc::ServerContext* context, ::cjLogin::UserCheckLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserCheckLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userLogout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLogout(::grpc::ServerContext* context, ::cjLogin::UserLogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserLogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_logoutUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogoutUser(::grpc::ServerContext* context, ::cjLogin::LogoutUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::LogoutUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerUser<WithAsyncMethod_userLogin<WithAsyncMethod_userCheckLogin<WithAsyncMethod_userLogout<WithAsyncMethod_logoutUser<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userLogin() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userCheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userCheckLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_userCheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userCheckLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userLogout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_logoutUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::RegisterUserRequest, ::cjLogin::RegisterUserResponse>(std::bind(&WithStreamedUnaryMethod_registerUser<BaseClass>::StreamedregisterUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::RegisterUserRequest,::cjLogin::RegisterUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userLogin() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserLoginRequest, ::cjLogin::UserLoginResponse>(std::bind(&WithStreamedUnaryMethod_userLogin<BaseClass>::StreameduserLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userLogin(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserLoginRequest,::cjLogin::UserLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userCheckLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userCheckLogin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserCheckLoginRequest, ::cjLogin::UserCheckLoginResponse>(std::bind(&WithStreamedUnaryMethod_userCheckLogin<BaseClass>::StreameduserCheckLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userCheckLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userCheckLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserCheckLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserCheckLoginRequest,::cjLogin::UserCheckLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userLogout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserLogoutRequest, ::cjLogin::UserLogoutResponse>(std::bind(&WithStreamedUnaryMethod_userLogout<BaseClass>::StreameduserLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserLogoutRequest,::cjLogin::UserLogoutResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_logoutUser() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(std::bind(&WithStreamedUnaryMethod_logoutUser<BaseClass>::StreamedlogoutUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlogoutUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::LogoutUserRequest,::cjLogin::LogoutUserResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_userLogin<WithStreamedUnaryMethod_userCheckLogin<WithStreamedUnaryMethod_userLogout<WithStreamedUnaryMethod_logoutUser<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_userLogin<WithStreamedUnaryMethod_userCheckLogin<WithStreamedUnaryMethod_userLogout<WithStreamedUnaryMethod_logoutUser<Service > > > > > StreamedService;
};

class CjLoginCGI final {
 public:
  static constexpr char const* service_full_name() {
    return "cjLogin.CjLoginCGI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status login(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>> Asynclogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    virtual ::grpc::Status checkLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>> AsynccheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>>(AsynccheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>> PrepareAsynccheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>>(PrepareAsynccheckLoginRaw(context, request, cq));
    }
    virtual ::grpc::Status logout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>> Asynclogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>> connect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>>(connectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>> Asyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>>(AsyncconnectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>>(PrepareAsyncconnectRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::RegisterUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>* AsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserCheckLoginResponse>* PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::UserLogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>* connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>* AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::cjLogin::RegisterUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status login(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::cjLogin::UserLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>> Asynclogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>>(AsyncloginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>> PrepareAsynclogin(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>>(PrepareAsyncloginRaw(context, request, cq));
    }
    ::grpc::Status checkLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::cjLogin::UserCheckLoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>> AsynccheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>>(AsynccheckLoginRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>> PrepareAsynccheckLogin(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>>(PrepareAsynccheckLoginRaw(context, request, cq));
    }
    ::grpc::Status logout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::cjLogin::UserLogoutResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>> Asynclogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>>(AsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>> PrepareAsynclogout(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>>(PrepareAsynclogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::cjLogin::ServerMessage>> connect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cjLogin::ServerMessage>>(connectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>> Asyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>>(AsyncconnectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>>(PrepareAsyncconnectRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::RegisterUserResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::cjLogin::RegisterUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* AsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLoginResponse>* PrepareAsyncloginRaw(::grpc::ClientContext* context, const ::cjLogin::UserLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* AsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserCheckLoginResponse>* PrepareAsynccheckLoginRaw(::grpc::ClientContext* context, const ::cjLogin::UserCheckLoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* AsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::UserLogoutResponse>* PrepareAsynclogoutRaw(::grpc::ClientContext* context, const ::cjLogin::UserLogoutRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::cjLogin::ServerMessage>* connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) override;
    ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_registerUser_;
    const ::grpc::RpcMethod rpcmethod_login_;
    const ::grpc::RpcMethod rpcmethod_checkLogin_;
    const ::grpc::RpcMethod rpcmethod_logout_;
    const ::grpc::RpcMethod rpcmethod_connect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response);
    virtual ::grpc::Status login(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response);
    virtual ::grpc::Status checkLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response);
    virtual ::grpc::Status logout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response);
    virtual ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::cjLogin::RegisterUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::RegisterUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_login() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogin(::grpc::ServerContext* context, ::cjLogin::UserLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_checkLogin() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcheckLogin(::grpc::ServerContext* context, ::cjLogin::UserCheckLoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserCheckLoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_logout() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestlogout(::grpc::ServerContext* context, ::cjLogin::UserLogoutRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::UserLogoutResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_connect() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::cjLogin::ConnectRequest* request, ::grpc::ServerAsyncWriter< ::cjLogin::ServerMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerUser<WithAsyncMethod_login<WithAsyncMethod_checkLogin<WithAsyncMethod_logout<WithAsyncMethod_connect<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_login() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status login(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_checkLogin() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_logout() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_connect() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::RegisterUserRequest, ::cjLogin::RegisterUserResponse>(std::bind(&WithStreamedUnaryMethod_registerUser<BaseClass>::StreamedregisterUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* context, const ::cjLogin::RegisterUserRequest* request, ::cjLogin::RegisterUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::RegisterUserRequest,::cjLogin::RegisterUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_login : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_login() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserLoginRequest, ::cjLogin::UserLoginResponse>(std::bind(&WithStreamedUnaryMethod_login<BaseClass>::Streamedlogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_login() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status login(::grpc::ServerContext* context, const ::cjLogin::UserLoginRequest* request, ::cjLogin::UserLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserLoginRequest,::cjLogin::UserLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_checkLogin : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_checkLogin() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserCheckLoginRequest, ::cjLogin::UserCheckLoginResponse>(std::bind(&WithStreamedUnaryMethod_checkLogin<BaseClass>::StreamedcheckLogin, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_checkLogin() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status checkLogin(::grpc::ServerContext* context, const ::cjLogin::UserCheckLoginRequest* request, ::cjLogin::UserCheckLoginResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcheckLogin(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserCheckLoginRequest,::cjLogin::UserCheckLoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_logout() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::UserLogoutRequest, ::cjLogin::UserLogoutResponse>(std::bind(&WithStreamedUnaryMethod_logout<BaseClass>::Streamedlogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_logout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logout(::grpc::ServerContext* context, const ::cjLogin::UserLogoutRequest* request, ::cjLogin::UserLogoutResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedlogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::UserLogoutRequest,::cjLogin::UserLogoutResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_checkLogin<WithStreamedUnaryMethod_logout<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_connect() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::SplitServerStreamingHandler< ::cjLogin::ConnectRequest, ::cjLogin::ServerMessage>(std::bind(&WithSplitStreamingMethod_connect<BaseClass>::Streamedconnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedconnect(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cjLogin::ConnectRequest,::cjLogin::ServerMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_connect<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_login<WithStreamedUnaryMethod_checkLogin<WithStreamedUnaryMethod_logout<WithSplitStreamingMethod_connect<Service > > > > > StreamedService;
};

class CjLoginPushService final {
 public:
  static constexpr char const* service_full_name() {
    return "cjLogin.CjLoginPushService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> AsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(AsynclogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> PrepareAsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(PrepareAsynclogoutUserRaw(context, request, cq));
    }
    virtual ::grpc::Status userLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> AsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(AsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>> PrepareAsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>>(PrepareAsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>> connect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>>(connectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>> Asyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>>(AsyncconnectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>>(PrepareAsyncconnectRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::cjLogin::LogoutUserResponse>* PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::cjLogin::ServerMessage>* connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>* AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::cjLogin::ServerMessage>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status logoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> AsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(AsynclogoutUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> PrepareAsynclogoutUser(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(PrepareAsynclogoutUserRaw(context, request, cq));
    }
    ::grpc::Status userLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::cjLogin::LogoutUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> AsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(AsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>> PrepareAsyncuserLogout(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>>(PrepareAsyncuserLogoutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::cjLogin::ServerMessage>> connect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::cjLogin::ServerMessage>>(connectRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>> Asyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>>(AsyncconnectRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>> PrepareAsyncconnect(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>>(PrepareAsyncconnectRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* AsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* PrepareAsynclogoutUserRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* AsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::cjLogin::LogoutUserResponse>* PrepareAsyncuserLogoutRaw(::grpc::ClientContext* context, const ::cjLogin::LogoutUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::cjLogin::ServerMessage>* connectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request) override;
    ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* AsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::cjLogin::ServerMessage>* PrepareAsyncconnectRaw(::grpc::ClientContext* context, const ::cjLogin::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_logoutUser_;
    const ::grpc::RpcMethod rpcmethod_userLogout_;
    const ::grpc::RpcMethod rpcmethod_connect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response);
    virtual ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response);
    virtual ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_logoutUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestlogoutUser(::grpc::ServerContext* context, ::cjLogin::LogoutUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::LogoutUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_userLogout() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestuserLogout(::grpc::ServerContext* context, ::cjLogin::LogoutUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::cjLogin::LogoutUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_connect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestconnect(::grpc::ServerContext* context, ::cjLogin::ConnectRequest* request, ::grpc::ServerAsyncWriter< ::cjLogin::ServerMessage>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_logoutUser<WithAsyncMethod_userLogout<WithAsyncMethod_connect<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_logoutUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_userLogout() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_connect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_logoutUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_logoutUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(std::bind(&WithStreamedUnaryMethod_logoutUser<BaseClass>::StreamedlogoutUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_logoutUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status logoutUser(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedlogoutUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::LogoutUserRequest,::cjLogin::LogoutUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_userLogout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_userLogout() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::cjLogin::LogoutUserRequest, ::cjLogin::LogoutUserResponse>(std::bind(&WithStreamedUnaryMethod_userLogout<BaseClass>::StreameduserLogout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_userLogout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status userLogout(::grpc::ServerContext* context, const ::cjLogin::LogoutUserRequest* request, ::cjLogin::LogoutUserResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameduserLogout(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::cjLogin::LogoutUserRequest,::cjLogin::LogoutUserResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_logoutUser<WithStreamedUnaryMethod_userLogout<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_connect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::SplitServerStreamingHandler< ::cjLogin::ConnectRequest, ::cjLogin::ServerMessage>(std::bind(&WithSplitStreamingMethod_connect<BaseClass>::Streamedconnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status connect(::grpc::ServerContext* context, const ::cjLogin::ConnectRequest* request, ::grpc::ServerWriter< ::cjLogin::ServerMessage>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedconnect(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::cjLogin::ConnectRequest,::cjLogin::ServerMessage>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_connect<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_logoutUser<WithStreamedUnaryMethod_userLogout<WithSplitStreamingMethod_connect<Service > > > StreamedService;
};

}  // namespace cjLogin


#endif  // GRPC_proto_2fcj_5flogin_2eproto__INCLUDED
