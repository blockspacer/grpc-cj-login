// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/cj_login.proto

#ifndef PROTOBUF_proto_2fcj_5flogin_2eproto__INCLUDED
#define PROTOBUF_proto_2fcj_5flogin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace cjLogin {
class BaseRequest;
class BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
class BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class ConnectRequest;
class ConnectRequestDefaultTypeInternal;
extern ConnectRequestDefaultTypeInternal _ConnectRequest_default_instance_;
class LogoutUserRequest;
class LogoutUserRequestDefaultTypeInternal;
extern LogoutUserRequestDefaultTypeInternal _LogoutUserRequest_default_instance_;
class LogoutUserResponse;
class LogoutUserResponseDefaultTypeInternal;
extern LogoutUserResponseDefaultTypeInternal _LogoutUserResponse_default_instance_;
class RegisterUserRequest;
class RegisterUserRequestDefaultTypeInternal;
extern RegisterUserRequestDefaultTypeInternal _RegisterUserRequest_default_instance_;
class RegisterUserResponse;
class RegisterUserResponseDefaultTypeInternal;
extern RegisterUserResponseDefaultTypeInternal _RegisterUserResponse_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
class UserCheckLoginRequest;
class UserCheckLoginRequestDefaultTypeInternal;
extern UserCheckLoginRequestDefaultTypeInternal _UserCheckLoginRequest_default_instance_;
class UserCheckLoginResponse;
class UserCheckLoginResponseDefaultTypeInternal;
extern UserCheckLoginResponseDefaultTypeInternal _UserCheckLoginResponse_default_instance_;
class UserLoginRequest;
class UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLoginResponse;
class UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
class UserLogoutRequest;
class UserLogoutRequestDefaultTypeInternal;
extern UserLogoutRequestDefaultTypeInternal _UserLogoutRequest_default_instance_;
class UserLogoutResponse;
class UserLogoutResponseDefaultTypeInternal;
extern UserLogoutResponseDefaultTypeInternal _UserLogoutResponse_default_instance_;
}  // namespace cjLogin

namespace cjLogin {

namespace protobuf_proto_2fcj_5flogin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_proto_2fcj_5flogin_2eproto

enum ErrCode {
  OK = 0,
  SYSTEM_ERROR = -1,
  SYSTEM_SESSION_TIMEOUT = -2,
  SYSTEM_INVALID_PARAM = -3,
  REGISTER_ERROR_USERNAME_INVALID = 1001,
  REGISTER_ERROR_USERNAME_EXISTS = 1002,
  REGISTER_ERROR_PWD_INVALID = 1003,
  LOGIN_ERROR_USER_NOT_EXISTS = 2001,
  LOGIN_ERROR_PWD_ERROR = 2002,
  CHECK_LOGIN_USER_LOGIN_OTHERS = 3001,
  CHECK_LOGIN_TICKET_TIMEOUT = 3003,
  ErrCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrCode_IsValid(int value);
const ErrCode ErrCode_MIN = SYSTEM_INVALID_PARAM;
const ErrCode ErrCode_MAX = CHECK_LOGIN_TICKET_TIMEOUT;
const int ErrCode_ARRAYSIZE = ErrCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrCode_descriptor();
inline const ::std::string& ErrCode_Name(ErrCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrCode_descriptor(), value);
}
inline bool ErrCode_Parse(
    const ::std::string& name, ErrCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrCode>(
    ErrCode_descriptor(), name, value);
}
enum ActionCode {
  Invalid = 0,
  Register = 1,
  Login = 2,
  CheckLogin = 3,
  Logout = 4,
  ActionCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActionCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActionCode_IsValid(int value);
const ActionCode ActionCode_MIN = Invalid;
const ActionCode ActionCode_MAX = Logout;
const int ActionCode_ARRAYSIZE = ActionCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionCode_descriptor();
inline const ::std::string& ActionCode_Name(ActionCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionCode_descriptor(), value);
}
inline bool ActionCode_Parse(
    const ::std::string& name, ActionCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionCode>(
    ActionCode_descriptor(), name, value);
}
enum MessageType {
  INVALID = 0,
  LOGOUT_BY_SYSTEM = 1,
  LOGOUT_BY_OTHERS = 2,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = INVALID;
const MessageType MessageType_MAX = LOGOUT_BY_OTHERS;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
// ===================================================================

class User : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.User) */ {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(User* other);
  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline User* New() const PROTOBUF_FINAL { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 2;
  void clear_username();
  static const int kUserNameFieldNumber = 2;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 3;
  void clear_password();
  static const int kPasswordFieldNumber = 3;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string loginTicket = 4;
  void clear_loginticket();
  static const int kLoginTicketFieldNumber = 4;
  const ::std::string& loginticket() const;
  void set_loginticket(const ::std::string& value);
  #if LANG_CXX11
  void set_loginticket(::std::string&& value);
  #endif
  void set_loginticket(const char* value);
  void set_loginticket(const char* value, size_t size);
  ::std::string* mutable_loginticket();
  ::std::string* release_loginticket();
  void set_allocated_loginticket(::std::string* loginticket);

  // uint64 uin = 1;
  void clear_uin();
  static const int kUinFieldNumber = 1;
  ::google::protobuf::uint64 uin() const;
  void set_uin(::google::protobuf::uint64 value);

  // uint64 loginTicketTimeout = 5;
  void clear_logintickettimeout();
  static const int kLoginTicketTimeoutFieldNumber = 5;
  ::google::protobuf::uint64 logintickettimeout() const;
  void set_logintickettimeout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cjLogin.User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr loginticket_;
  ::google::protobuf::uint64 uin_;
  ::google::protobuf::uint64 logintickettimeout_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.BaseRequest) */ {
 public:
  BaseRequest();
  virtual ~BaseRequest();

  BaseRequest(const BaseRequest& from);

  inline BaseRequest& operator=(const BaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseRequest(BaseRequest&& from) noexcept
    : BaseRequest() {
    *this = ::std::move(from);
  }

  inline BaseRequest& operator=(BaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseRequest& default_instance();

  static inline const BaseRequest* internal_default_instance() {
    return reinterpret_cast<const BaseRequest*>(
               &_BaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(BaseRequest* other);
  friend void swap(BaseRequest& a, BaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseRequest& from);
  void MergeFrom(const BaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string sessionKey = 2;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 2;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // @@protoc_insertion_point(class_scope:cjLogin.BaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BaseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.BaseResponse) */ {
 public:
  BaseResponse();
  virtual ~BaseResponse();

  BaseResponse(const BaseResponse& from);

  inline BaseResponse& operator=(const BaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseResponse(BaseResponse&& from) noexcept
    : BaseResponse() {
    *this = ::std::move(from);
  }

  inline BaseResponse& operator=(BaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseResponse& default_instance();

  static inline const BaseResponse* internal_default_instance() {
    return reinterpret_cast<const BaseResponse*>(
               &_BaseResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BaseResponse* other);
  friend void swap(BaseResponse& a, BaseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BaseResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseResponse& from);
  void MergeFrom(const BaseResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // .cjLogin.ErrCode errcode = 1;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  ::cjLogin::ErrCode errcode() const;
  void set_errcode(::cjLogin::ErrCode value);

  // @@protoc_insertion_point(class_scope:cjLogin.BaseResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  int errcode_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.RegisterUserRequest) */ {
 public:
  RegisterUserRequest();
  virtual ~RegisterUserRequest();

  RegisterUserRequest(const RegisterUserRequest& from);

  inline RegisterUserRequest& operator=(const RegisterUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterUserRequest(RegisterUserRequest&& from) noexcept
    : RegisterUserRequest() {
    *this = ::std::move(from);
  }

  inline RegisterUserRequest& operator=(RegisterUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterUserRequest& default_instance();

  static inline const RegisterUserRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterUserRequest*>(
               &_RegisterUserRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RegisterUserRequest* other);
  friend void swap(RegisterUserRequest& a, RegisterUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterUserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterUserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterUserRequest& from);
  void MergeFrom(const RegisterUserRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:cjLogin.RegisterUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.RegisterUserResponse) */ {
 public:
  RegisterUserResponse();
  virtual ~RegisterUserResponse();

  RegisterUserResponse(const RegisterUserResponse& from);

  inline RegisterUserResponse& operator=(const RegisterUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterUserResponse(RegisterUserResponse&& from) noexcept
    : RegisterUserResponse() {
    *this = ::std::move(from);
  }

  inline RegisterUserResponse& operator=(RegisterUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterUserResponse& default_instance();

  static inline const RegisterUserResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterUserResponse*>(
               &_RegisterUserResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RegisterUserResponse* other);
  friend void swap(RegisterUserResponse& a, RegisterUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterUserResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  RegisterUserResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RegisterUserResponse& from);
  void MergeFrom(const RegisterUserResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RegisterUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cjLogin.BaseResponse baseResp = 1;
  bool has_baseresp() const;
  void clear_baseresp();
  static const int kBaseRespFieldNumber = 1;
  const ::cjLogin::BaseResponse& baseresp() const;
  ::cjLogin::BaseResponse* mutable_baseresp();
  ::cjLogin::BaseResponse* release_baseresp();
  void set_allocated_baseresp(::cjLogin::BaseResponse* baseresp);

  // @@protoc_insertion_point(class_scope:cjLogin.RegisterUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cjLogin::BaseResponse* baseresp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserLoginRequest) */ {
 public:
  UserLoginRequest();
  virtual ~UserLoginRequest();

  UserLoginRequest(const UserLoginRequest& from);

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginRequest& default_instance();

  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(UserLoginRequest* other);
  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLoginRequest& from);
  void MergeFrom(const UserLoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:cjLogin.UserLoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserLoginResponse) */ {
 public:
  UserLoginResponse();
  virtual ~UserLoginResponse();

  UserLoginResponse(const UserLoginResponse& from);

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLoginResponse& default_instance();

  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UserLoginResponse* other);
  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLoginResponse& from);
  void MergeFrom(const UserLoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string loginTicket = 2;
  void clear_loginticket();
  static const int kLoginTicketFieldNumber = 2;
  const ::std::string& loginticket() const;
  void set_loginticket(const ::std::string& value);
  #if LANG_CXX11
  void set_loginticket(::std::string&& value);
  #endif
  void set_loginticket(const char* value);
  void set_loginticket(const char* value, size_t size);
  ::std::string* mutable_loginticket();
  ::std::string* release_loginticket();
  void set_allocated_loginticket(::std::string* loginticket);

  // .cjLogin.BaseResponse baseResp = 1;
  bool has_baseresp() const;
  void clear_baseresp();
  static const int kBaseRespFieldNumber = 1;
  const ::cjLogin::BaseResponse& baseresp() const;
  ::cjLogin::BaseResponse* mutable_baseresp();
  ::cjLogin::BaseResponse* release_baseresp();
  void set_allocated_baseresp(::cjLogin::BaseResponse* baseresp);

  // @@protoc_insertion_point(class_scope:cjLogin.UserLoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr loginticket_;
  ::cjLogin::BaseResponse* baseresp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserCheckLoginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserCheckLoginRequest) */ {
 public:
  UserCheckLoginRequest();
  virtual ~UserCheckLoginRequest();

  UserCheckLoginRequest(const UserCheckLoginRequest& from);

  inline UserCheckLoginRequest& operator=(const UserCheckLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCheckLoginRequest(UserCheckLoginRequest&& from) noexcept
    : UserCheckLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserCheckLoginRequest& operator=(UserCheckLoginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCheckLoginRequest& default_instance();

  static inline const UserCheckLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserCheckLoginRequest*>(
               &_UserCheckLoginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UserCheckLoginRequest* other);
  friend void swap(UserCheckLoginRequest& a, UserCheckLoginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCheckLoginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserCheckLoginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserCheckLoginRequest& from);
  void MergeFrom(const UserCheckLoginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserCheckLoginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userName = 1;
  void clear_username();
  static const int kUserNameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string loginTicket = 2;
  void clear_loginticket();
  static const int kLoginTicketFieldNumber = 2;
  const ::std::string& loginticket() const;
  void set_loginticket(const ::std::string& value);
  #if LANG_CXX11
  void set_loginticket(::std::string&& value);
  #endif
  void set_loginticket(const char* value);
  void set_loginticket(const char* value, size_t size);
  ::std::string* mutable_loginticket();
  ::std::string* release_loginticket();
  void set_allocated_loginticket(::std::string* loginticket);

  // @@protoc_insertion_point(class_scope:cjLogin.UserCheckLoginRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr loginticket_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserCheckLoginResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserCheckLoginResponse) */ {
 public:
  UserCheckLoginResponse();
  virtual ~UserCheckLoginResponse();

  UserCheckLoginResponse(const UserCheckLoginResponse& from);

  inline UserCheckLoginResponse& operator=(const UserCheckLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserCheckLoginResponse(UserCheckLoginResponse&& from) noexcept
    : UserCheckLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserCheckLoginResponse& operator=(UserCheckLoginResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserCheckLoginResponse& default_instance();

  static inline const UserCheckLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserCheckLoginResponse*>(
               &_UserCheckLoginResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(UserCheckLoginResponse* other);
  friend void swap(UserCheckLoginResponse& a, UserCheckLoginResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserCheckLoginResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserCheckLoginResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserCheckLoginResponse& from);
  void MergeFrom(const UserCheckLoginResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserCheckLoginResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string sessionKey = 2;
  void clear_sessionkey();
  static const int kSessionKeyFieldNumber = 2;
  const ::std::string& sessionkey() const;
  void set_sessionkey(const ::std::string& value);
  #if LANG_CXX11
  void set_sessionkey(::std::string&& value);
  #endif
  void set_sessionkey(const char* value);
  void set_sessionkey(const char* value, size_t size);
  ::std::string* mutable_sessionkey();
  ::std::string* release_sessionkey();
  void set_allocated_sessionkey(::std::string* sessionkey);

  // .cjLogin.BaseResponse baseResp = 1;
  bool has_baseresp() const;
  void clear_baseresp();
  static const int kBaseRespFieldNumber = 1;
  const ::cjLogin::BaseResponse& baseresp() const;
  ::cjLogin::BaseResponse* mutable_baseresp();
  ::cjLogin::BaseResponse* release_baseresp();
  void set_allocated_baseresp(::cjLogin::BaseResponse* baseresp);

  // @@protoc_insertion_point(class_scope:cjLogin.UserCheckLoginResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr sessionkey_;
  ::cjLogin::BaseResponse* baseresp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogoutRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserLogoutRequest) */ {
 public:
  UserLogoutRequest();
  virtual ~UserLogoutRequest();

  UserLogoutRequest(const UserLogoutRequest& from);

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogoutRequest(UserLogoutRequest&& from) noexcept
    : UserLogoutRequest() {
    *this = ::std::move(from);
  }

  inline UserLogoutRequest& operator=(UserLogoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogoutRequest& default_instance();

  static inline const UserLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogoutRequest*>(
               &_UserLogoutRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(UserLogoutRequest* other);
  friend void swap(UserLogoutRequest& a, UserLogoutRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogoutRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLogoutRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLogoutRequest& from);
  void MergeFrom(const UserLogoutRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLogoutRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cjLogin.BaseRequest baseReq = 1;
  bool has_basereq() const;
  void clear_basereq();
  static const int kBaseReqFieldNumber = 1;
  const ::cjLogin::BaseRequest& basereq() const;
  ::cjLogin::BaseRequest* mutable_basereq();
  ::cjLogin::BaseRequest* release_basereq();
  void set_allocated_basereq(::cjLogin::BaseRequest* basereq);

  // @@protoc_insertion_point(class_scope:cjLogin.UserLogoutRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cjLogin::BaseRequest* basereq_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UserLogoutResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.UserLogoutResponse) */ {
 public:
  UserLogoutResponse();
  virtual ~UserLogoutResponse();

  UserLogoutResponse(const UserLogoutResponse& from);

  inline UserLogoutResponse& operator=(const UserLogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserLogoutResponse(UserLogoutResponse&& from) noexcept
    : UserLogoutResponse() {
    *this = ::std::move(from);
  }

  inline UserLogoutResponse& operator=(UserLogoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserLogoutResponse& default_instance();

  static inline const UserLogoutResponse* internal_default_instance() {
    return reinterpret_cast<const UserLogoutResponse*>(
               &_UserLogoutResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(UserLogoutResponse* other);
  friend void swap(UserLogoutResponse& a, UserLogoutResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserLogoutResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  UserLogoutResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserLogoutResponse& from);
  void MergeFrom(const UserLogoutResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserLogoutResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cjLogin.BaseResponse baseResp = 1;
  bool has_baseresp() const;
  void clear_baseresp();
  static const int kBaseRespFieldNumber = 1;
  const ::cjLogin::BaseResponse& baseresp() const;
  ::cjLogin::BaseResponse* mutable_baseresp();
  ::cjLogin::BaseResponse* release_baseresp();
  void set_allocated_baseresp(::cjLogin::BaseResponse* baseresp);

  // @@protoc_insertion_point(class_scope:cjLogin.UserLogoutResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cjLogin::BaseResponse* baseresp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutUserRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.LogoutUserRequest) */ {
 public:
  LogoutUserRequest();
  virtual ~LogoutUserRequest();

  LogoutUserRequest(const LogoutUserRequest& from);

  inline LogoutUserRequest& operator=(const LogoutUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutUserRequest(LogoutUserRequest&& from) noexcept
    : LogoutUserRequest() {
    *this = ::std::move(from);
  }

  inline LogoutUserRequest& operator=(LogoutUserRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutUserRequest& default_instance();

  static inline const LogoutUserRequest* internal_default_instance() {
    return reinterpret_cast<const LogoutUserRequest*>(
               &_LogoutUserRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(LogoutUserRequest* other);
  friend void swap(LogoutUserRequest& a, LogoutUserRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutUserRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutUserRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutUserRequest& from);
  void MergeFrom(const LogoutUserRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutUserRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 uin = 1;
  void clear_uin();
  static const int kUinFieldNumber = 1;
  ::google::protobuf::uint64 uin() const;
  void set_uin(::google::protobuf::uint64 value);

  // bool logoutByOthers = 2;
  void clear_logoutbyothers();
  static const int kLogoutByOthersFieldNumber = 2;
  bool logoutbyothers() const;
  void set_logoutbyothers(bool value);

  // @@protoc_insertion_point(class_scope:cjLogin.LogoutUserRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 uin_;
  bool logoutbyothers_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogoutUserResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.LogoutUserResponse) */ {
 public:
  LogoutUserResponse();
  virtual ~LogoutUserResponse();

  LogoutUserResponse(const LogoutUserResponse& from);

  inline LogoutUserResponse& operator=(const LogoutUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogoutUserResponse(LogoutUserResponse&& from) noexcept
    : LogoutUserResponse() {
    *this = ::std::move(from);
  }

  inline LogoutUserResponse& operator=(LogoutUserResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutUserResponse& default_instance();

  static inline const LogoutUserResponse* internal_default_instance() {
    return reinterpret_cast<const LogoutUserResponse*>(
               &_LogoutUserResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(LogoutUserResponse* other);
  friend void swap(LogoutUserResponse& a, LogoutUserResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogoutUserResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogoutUserResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogoutUserResponse& from);
  void MergeFrom(const LogoutUserResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogoutUserResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cjLogin.BaseResponse baseResp = 1;
  bool has_baseresp() const;
  void clear_baseresp();
  static const int kBaseRespFieldNumber = 1;
  const ::cjLogin::BaseResponse& baseresp() const;
  ::cjLogin::BaseResponse* mutable_baseresp();
  ::cjLogin::BaseResponse* release_baseresp();
  void set_allocated_baseresp(::cjLogin::BaseResponse* baseresp);

  // @@protoc_insertion_point(class_scope:cjLogin.LogoutUserResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cjLogin::BaseResponse* baseresp_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.ConnectRequest) */ {
 public:
  ConnectRequest();
  virtual ~ConnectRequest();

  ConnectRequest(const ConnectRequest& from);

  inline ConnectRequest& operator=(const ConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectRequest(ConnectRequest&& from) noexcept
    : ConnectRequest() {
    *this = ::std::move(from);
  }

  inline ConnectRequest& operator=(ConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequest& default_instance();

  static inline const ConnectRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectRequest*>(
               &_ConnectRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ConnectRequest* other);
  friend void swap(ConnectRequest& a, ConnectRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ConnectRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ConnectRequest& from);
  void MergeFrom(const ConnectRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ConnectRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .cjLogin.BaseRequest baseReq = 1;
  bool has_basereq() const;
  void clear_basereq();
  static const int kBaseReqFieldNumber = 1;
  const ::cjLogin::BaseRequest& basereq() const;
  ::cjLogin::BaseRequest* mutable_basereq();
  ::cjLogin::BaseRequest* release_basereq();
  void set_allocated_basereq(::cjLogin::BaseRequest* basereq);

  // @@protoc_insertion_point(class_scope:cjLogin.ConnectRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::cjLogin::BaseRequest* basereq_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cjLogin.ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ServerMessage* other);
  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 2;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // .cjLogin.MessageType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cjLogin::MessageType type() const;
  void set_type(::cjLogin::MessageType value);

  // @@protoc_insertion_point(class_scope:cjLogin.ServerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_proto_2fcj_5flogin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// uint64 uin = 1;
inline void User::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 User::uin() const {
  // @@protoc_insertion_point(field_get:cjLogin.User.uin)
  return uin_;
}
inline void User::set_uin(::google::protobuf::uint64 value) {
  
  uin_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.User.uin)
}

// string userName = 2;
inline void User::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::username() const {
  // @@protoc_insertion_point(field_get:cjLogin.User.userName)
  return username_.GetNoArena();
}
inline void User::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.User.userName)
}
#if LANG_CXX11
inline void User::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.User.userName)
}
#endif
inline void User::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.User.userName)
}
inline void User::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.User.userName)
}
inline ::std::string* User::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.User.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_username() {
  // @@protoc_insertion_point(field_release:cjLogin.User.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.User.userName)
}

// string password = 3;
inline void User::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::password() const {
  // @@protoc_insertion_point(field_get:cjLogin.User.password)
  return password_.GetNoArena();
}
inline void User::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.User.password)
}
#if LANG_CXX11
inline void User::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.User.password)
}
#endif
inline void User::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.User.password)
}
inline void User::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.User.password)
}
inline ::std::string* User::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.User.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_password() {
  // @@protoc_insertion_point(field_release:cjLogin.User.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.User.password)
}

// string loginTicket = 4;
inline void User::clear_loginticket() {
  loginticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& User::loginticket() const {
  // @@protoc_insertion_point(field_get:cjLogin.User.loginTicket)
  return loginticket_.GetNoArena();
}
inline void User::set_loginticket(const ::std::string& value) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.User.loginTicket)
}
#if LANG_CXX11
inline void User::set_loginticket(::std::string&& value) {
  
  loginticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.User.loginTicket)
}
#endif
inline void User::set_loginticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.User.loginTicket)
}
inline void User::set_loginticket(const char* value, size_t size) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.User.loginTicket)
}
inline ::std::string* User::mutable_loginticket() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.User.loginTicket)
  return loginticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* User::release_loginticket() {
  // @@protoc_insertion_point(field_release:cjLogin.User.loginTicket)
  
  return loginticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void User::set_allocated_loginticket(::std::string* loginticket) {
  if (loginticket != NULL) {
    
  } else {
    
  }
  loginticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginticket);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.User.loginTicket)
}

// uint64 loginTicketTimeout = 5;
inline void User::clear_logintickettimeout() {
  logintickettimeout_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 User::logintickettimeout() const {
  // @@protoc_insertion_point(field_get:cjLogin.User.loginTicketTimeout)
  return logintickettimeout_;
}
inline void User::set_logintickettimeout(::google::protobuf::uint64 value) {
  
  logintickettimeout_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.User.loginTicketTimeout)
}

// -------------------------------------------------------------------

// BaseRequest

// string userName = 1;
inline void BaseRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseRequest::username() const {
  // @@protoc_insertion_point(field_get:cjLogin.BaseRequest.userName)
  return username_.GetNoArena();
}
inline void BaseRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.BaseRequest.userName)
}
#if LANG_CXX11
inline void BaseRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.BaseRequest.userName)
}
#endif
inline void BaseRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.BaseRequest.userName)
}
inline void BaseRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.BaseRequest.userName)
}
inline ::std::string* BaseRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.BaseRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRequest::release_username() {
  // @@protoc_insertion_point(field_release:cjLogin.BaseRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.BaseRequest.userName)
}

// string sessionKey = 2;
inline void BaseRequest::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseRequest::sessionkey() const {
  // @@protoc_insertion_point(field_get:cjLogin.BaseRequest.sessionKey)
  return sessionkey_.GetNoArena();
}
inline void BaseRequest::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.BaseRequest.sessionKey)
}
#if LANG_CXX11
inline void BaseRequest::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.BaseRequest.sessionKey)
}
#endif
inline void BaseRequest::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.BaseRequest.sessionKey)
}
inline void BaseRequest::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.BaseRequest.sessionKey)
}
inline ::std::string* BaseRequest::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.BaseRequest.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRequest::release_sessionkey() {
  // @@protoc_insertion_point(field_release:cjLogin.BaseRequest.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRequest::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.BaseRequest.sessionKey)
}

// -------------------------------------------------------------------

// BaseResponse

// .cjLogin.ErrCode errcode = 1;
inline void BaseResponse::clear_errcode() {
  errcode_ = 0;
}
inline ::cjLogin::ErrCode BaseResponse::errcode() const {
  // @@protoc_insertion_point(field_get:cjLogin.BaseResponse.errcode)
  return static_cast< ::cjLogin::ErrCode >(errcode_);
}
inline void BaseResponse::set_errcode(::cjLogin::ErrCode value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.BaseResponse.errcode)
}

// string errmsg = 2;
inline void BaseResponse::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BaseResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:cjLogin.BaseResponse.errmsg)
  return errmsg_.GetNoArena();
}
inline void BaseResponse::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.BaseResponse.errmsg)
}
#if LANG_CXX11
inline void BaseResponse::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.BaseResponse.errmsg)
}
#endif
inline void BaseResponse::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.BaseResponse.errmsg)
}
inline void BaseResponse::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.BaseResponse.errmsg)
}
inline ::std::string* BaseResponse::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.BaseResponse.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseResponse::release_errmsg() {
  // @@protoc_insertion_point(field_release:cjLogin.BaseResponse.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseResponse::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.BaseResponse.errmsg)
}

// -------------------------------------------------------------------

// RegisterUserRequest

// string userName = 1;
inline void RegisterUserRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterUserRequest::username() const {
  // @@protoc_insertion_point(field_get:cjLogin.RegisterUserRequest.userName)
  return username_.GetNoArena();
}
inline void RegisterUserRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.RegisterUserRequest.userName)
}
#if LANG_CXX11
inline void RegisterUserRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.RegisterUserRequest.userName)
}
#endif
inline void RegisterUserRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.RegisterUserRequest.userName)
}
inline void RegisterUserRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.RegisterUserRequest.userName)
}
inline ::std::string* RegisterUserRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.RegisterUserRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:cjLogin.RegisterUserRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterUserRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.RegisterUserRequest.userName)
}

// string password = 2;
inline void RegisterUserRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterUserRequest::password() const {
  // @@protoc_insertion_point(field_get:cjLogin.RegisterUserRequest.password)
  return password_.GetNoArena();
}
inline void RegisterUserRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.RegisterUserRequest.password)
}
#if LANG_CXX11
inline void RegisterUserRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.RegisterUserRequest.password)
}
#endif
inline void RegisterUserRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.RegisterUserRequest.password)
}
inline void RegisterUserRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.RegisterUserRequest.password)
}
inline ::std::string* RegisterUserRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.RegisterUserRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterUserRequest::release_password() {
  // @@protoc_insertion_point(field_release:cjLogin.RegisterUserRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterUserRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.RegisterUserRequest.password)
}

// -------------------------------------------------------------------

// RegisterUserResponse

// .cjLogin.BaseResponse baseResp = 1;
inline bool RegisterUserResponse::has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != NULL;
}
inline void RegisterUserResponse::clear_baseresp() {
  if (GetArenaNoVirtual() == NULL && baseresp_ != NULL) delete baseresp_;
  baseresp_ = NULL;
}
inline const ::cjLogin::BaseResponse& RegisterUserResponse::baseresp() const {
  const ::cjLogin::BaseResponse* p = baseresp_;
  // @@protoc_insertion_point(field_get:cjLogin.RegisterUserResponse.baseResp)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseResponse*>(
      &::cjLogin::_BaseResponse_default_instance_);
}
inline ::cjLogin::BaseResponse* RegisterUserResponse::mutable_baseresp() {
  
  if (baseresp_ == NULL) {
    baseresp_ = new ::cjLogin::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.RegisterUserResponse.baseResp)
  return baseresp_;
}
inline ::cjLogin::BaseResponse* RegisterUserResponse::release_baseresp() {
  // @@protoc_insertion_point(field_release:cjLogin.RegisterUserResponse.baseResp)
  
  ::cjLogin::BaseResponse* temp = baseresp_;
  baseresp_ = NULL;
  return temp;
}
inline void RegisterUserResponse::set_allocated_baseresp(::cjLogin::BaseResponse* baseresp) {
  delete baseresp_;
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.RegisterUserResponse.baseResp)
}

// -------------------------------------------------------------------

// UserLoginRequest

// string userName = 1;
inline void UserLoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserLoginRequest.userName)
  return username_.GetNoArena();
}
inline void UserLoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserLoginRequest.userName)
}
#if LANG_CXX11
inline void UserLoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserLoginRequest.userName)
}
#endif
inline void UserLoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserLoginRequest.userName)
}
inline void UserLoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserLoginRequest.userName)
}
inline ::std::string* UserLoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLoginRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLoginRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLoginRequest.userName)
}

// string password = 2;
inline void UserLoginRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserLoginRequest.password)
  return password_.GetNoArena();
}
inline void UserLoginRequest::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserLoginRequest.password)
}
#if LANG_CXX11
inline void UserLoginRequest::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserLoginRequest.password)
}
#endif
inline void UserLoginRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserLoginRequest.password)
}
inline void UserLoginRequest::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserLoginRequest.password)
}
inline ::std::string* UserLoginRequest::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLoginRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLoginRequest.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLoginRequest.password)
}

// -------------------------------------------------------------------

// UserLoginResponse

// .cjLogin.BaseResponse baseResp = 1;
inline bool UserLoginResponse::has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != NULL;
}
inline void UserLoginResponse::clear_baseresp() {
  if (GetArenaNoVirtual() == NULL && baseresp_ != NULL) delete baseresp_;
  baseresp_ = NULL;
}
inline const ::cjLogin::BaseResponse& UserLoginResponse::baseresp() const {
  const ::cjLogin::BaseResponse* p = baseresp_;
  // @@protoc_insertion_point(field_get:cjLogin.UserLoginResponse.baseResp)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseResponse*>(
      &::cjLogin::_BaseResponse_default_instance_);
}
inline ::cjLogin::BaseResponse* UserLoginResponse::mutable_baseresp() {
  
  if (baseresp_ == NULL) {
    baseresp_ = new ::cjLogin::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLoginResponse.baseResp)
  return baseresp_;
}
inline ::cjLogin::BaseResponse* UserLoginResponse::release_baseresp() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLoginResponse.baseResp)
  
  ::cjLogin::BaseResponse* temp = baseresp_;
  baseresp_ = NULL;
  return temp;
}
inline void UserLoginResponse::set_allocated_baseresp(::cjLogin::BaseResponse* baseresp) {
  delete baseresp_;
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLoginResponse.baseResp)
}

// string loginTicket = 2;
inline void UserLoginResponse::clear_loginticket() {
  loginticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserLoginResponse::loginticket() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserLoginResponse.loginTicket)
  return loginticket_.GetNoArena();
}
inline void UserLoginResponse::set_loginticket(const ::std::string& value) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserLoginResponse.loginTicket)
}
#if LANG_CXX11
inline void UserLoginResponse::set_loginticket(::std::string&& value) {
  
  loginticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserLoginResponse.loginTicket)
}
#endif
inline void UserLoginResponse::set_loginticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserLoginResponse.loginTicket)
}
inline void UserLoginResponse::set_loginticket(const char* value, size_t size) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserLoginResponse.loginTicket)
}
inline ::std::string* UserLoginResponse::mutable_loginticket() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLoginResponse.loginTicket)
  return loginticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserLoginResponse::release_loginticket() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLoginResponse.loginTicket)
  
  return loginticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserLoginResponse::set_allocated_loginticket(::std::string* loginticket) {
  if (loginticket != NULL) {
    
  } else {
    
  }
  loginticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginticket);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLoginResponse.loginTicket)
}

// -------------------------------------------------------------------

// UserCheckLoginRequest

// string userName = 1;
inline void UserCheckLoginRequest::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCheckLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserCheckLoginRequest.userName)
  return username_.GetNoArena();
}
inline void UserCheckLoginRequest::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserCheckLoginRequest.userName)
}
#if LANG_CXX11
inline void UserCheckLoginRequest::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserCheckLoginRequest.userName)
}
#endif
inline void UserCheckLoginRequest::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserCheckLoginRequest.userName)
}
inline void UserCheckLoginRequest::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserCheckLoginRequest.userName)
}
inline ::std::string* UserCheckLoginRequest::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserCheckLoginRequest.userName)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCheckLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:cjLogin.UserCheckLoginRequest.userName)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCheckLoginRequest::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserCheckLoginRequest.userName)
}

// string loginTicket = 2;
inline void UserCheckLoginRequest::clear_loginticket() {
  loginticket_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCheckLoginRequest::loginticket() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserCheckLoginRequest.loginTicket)
  return loginticket_.GetNoArena();
}
inline void UserCheckLoginRequest::set_loginticket(const ::std::string& value) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserCheckLoginRequest.loginTicket)
}
#if LANG_CXX11
inline void UserCheckLoginRequest::set_loginticket(::std::string&& value) {
  
  loginticket_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserCheckLoginRequest.loginTicket)
}
#endif
inline void UserCheckLoginRequest::set_loginticket(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserCheckLoginRequest.loginTicket)
}
inline void UserCheckLoginRequest::set_loginticket(const char* value, size_t size) {
  
  loginticket_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserCheckLoginRequest.loginTicket)
}
inline ::std::string* UserCheckLoginRequest::mutable_loginticket() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserCheckLoginRequest.loginTicket)
  return loginticket_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCheckLoginRequest::release_loginticket() {
  // @@protoc_insertion_point(field_release:cjLogin.UserCheckLoginRequest.loginTicket)
  
  return loginticket_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCheckLoginRequest::set_allocated_loginticket(::std::string* loginticket) {
  if (loginticket != NULL) {
    
  } else {
    
  }
  loginticket_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), loginticket);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserCheckLoginRequest.loginTicket)
}

// -------------------------------------------------------------------

// UserCheckLoginResponse

// .cjLogin.BaseResponse baseResp = 1;
inline bool UserCheckLoginResponse::has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != NULL;
}
inline void UserCheckLoginResponse::clear_baseresp() {
  if (GetArenaNoVirtual() == NULL && baseresp_ != NULL) delete baseresp_;
  baseresp_ = NULL;
}
inline const ::cjLogin::BaseResponse& UserCheckLoginResponse::baseresp() const {
  const ::cjLogin::BaseResponse* p = baseresp_;
  // @@protoc_insertion_point(field_get:cjLogin.UserCheckLoginResponse.baseResp)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseResponse*>(
      &::cjLogin::_BaseResponse_default_instance_);
}
inline ::cjLogin::BaseResponse* UserCheckLoginResponse::mutable_baseresp() {
  
  if (baseresp_ == NULL) {
    baseresp_ = new ::cjLogin::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.UserCheckLoginResponse.baseResp)
  return baseresp_;
}
inline ::cjLogin::BaseResponse* UserCheckLoginResponse::release_baseresp() {
  // @@protoc_insertion_point(field_release:cjLogin.UserCheckLoginResponse.baseResp)
  
  ::cjLogin::BaseResponse* temp = baseresp_;
  baseresp_ = NULL;
  return temp;
}
inline void UserCheckLoginResponse::set_allocated_baseresp(::cjLogin::BaseResponse* baseresp) {
  delete baseresp_;
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserCheckLoginResponse.baseResp)
}

// string sessionKey = 2;
inline void UserCheckLoginResponse::clear_sessionkey() {
  sessionkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserCheckLoginResponse::sessionkey() const {
  // @@protoc_insertion_point(field_get:cjLogin.UserCheckLoginResponse.sessionKey)
  return sessionkey_.GetNoArena();
}
inline void UserCheckLoginResponse::set_sessionkey(const ::std::string& value) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.UserCheckLoginResponse.sessionKey)
}
#if LANG_CXX11
inline void UserCheckLoginResponse::set_sessionkey(::std::string&& value) {
  
  sessionkey_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.UserCheckLoginResponse.sessionKey)
}
#endif
inline void UserCheckLoginResponse::set_sessionkey(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.UserCheckLoginResponse.sessionKey)
}
inline void UserCheckLoginResponse::set_sessionkey(const char* value, size_t size) {
  
  sessionkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.UserCheckLoginResponse.sessionKey)
}
inline ::std::string* UserCheckLoginResponse::mutable_sessionkey() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.UserCheckLoginResponse.sessionKey)
  return sessionkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserCheckLoginResponse::release_sessionkey() {
  // @@protoc_insertion_point(field_release:cjLogin.UserCheckLoginResponse.sessionKey)
  
  return sessionkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserCheckLoginResponse::set_allocated_sessionkey(::std::string* sessionkey) {
  if (sessionkey != NULL) {
    
  } else {
    
  }
  sessionkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sessionkey);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserCheckLoginResponse.sessionKey)
}

// -------------------------------------------------------------------

// UserLogoutRequest

// .cjLogin.BaseRequest baseReq = 1;
inline bool UserLogoutRequest::has_basereq() const {
  return this != internal_default_instance() && basereq_ != NULL;
}
inline void UserLogoutRequest::clear_basereq() {
  if (GetArenaNoVirtual() == NULL && basereq_ != NULL) delete basereq_;
  basereq_ = NULL;
}
inline const ::cjLogin::BaseRequest& UserLogoutRequest::basereq() const {
  const ::cjLogin::BaseRequest* p = basereq_;
  // @@protoc_insertion_point(field_get:cjLogin.UserLogoutRequest.baseReq)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseRequest*>(
      &::cjLogin::_BaseRequest_default_instance_);
}
inline ::cjLogin::BaseRequest* UserLogoutRequest::mutable_basereq() {
  
  if (basereq_ == NULL) {
    basereq_ = new ::cjLogin::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLogoutRequest.baseReq)
  return basereq_;
}
inline ::cjLogin::BaseRequest* UserLogoutRequest::release_basereq() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLogoutRequest.baseReq)
  
  ::cjLogin::BaseRequest* temp = basereq_;
  basereq_ = NULL;
  return temp;
}
inline void UserLogoutRequest::set_allocated_basereq(::cjLogin::BaseRequest* basereq) {
  delete basereq_;
  basereq_ = basereq;
  if (basereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLogoutRequest.baseReq)
}

// -------------------------------------------------------------------

// UserLogoutResponse

// .cjLogin.BaseResponse baseResp = 1;
inline bool UserLogoutResponse::has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != NULL;
}
inline void UserLogoutResponse::clear_baseresp() {
  if (GetArenaNoVirtual() == NULL && baseresp_ != NULL) delete baseresp_;
  baseresp_ = NULL;
}
inline const ::cjLogin::BaseResponse& UserLogoutResponse::baseresp() const {
  const ::cjLogin::BaseResponse* p = baseresp_;
  // @@protoc_insertion_point(field_get:cjLogin.UserLogoutResponse.baseResp)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseResponse*>(
      &::cjLogin::_BaseResponse_default_instance_);
}
inline ::cjLogin::BaseResponse* UserLogoutResponse::mutable_baseresp() {
  
  if (baseresp_ == NULL) {
    baseresp_ = new ::cjLogin::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.UserLogoutResponse.baseResp)
  return baseresp_;
}
inline ::cjLogin::BaseResponse* UserLogoutResponse::release_baseresp() {
  // @@protoc_insertion_point(field_release:cjLogin.UserLogoutResponse.baseResp)
  
  ::cjLogin::BaseResponse* temp = baseresp_;
  baseresp_ = NULL;
  return temp;
}
inline void UserLogoutResponse::set_allocated_baseresp(::cjLogin::BaseResponse* baseresp) {
  delete baseresp_;
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.UserLogoutResponse.baseResp)
}

// -------------------------------------------------------------------

// LogoutUserRequest

// uint64 uin = 1;
inline void LogoutUserRequest::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogoutUserRequest::uin() const {
  // @@protoc_insertion_point(field_get:cjLogin.LogoutUserRequest.uin)
  return uin_;
}
inline void LogoutUserRequest::set_uin(::google::protobuf::uint64 value) {
  
  uin_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.LogoutUserRequest.uin)
}

// bool logoutByOthers = 2;
inline void LogoutUserRequest::clear_logoutbyothers() {
  logoutbyothers_ = false;
}
inline bool LogoutUserRequest::logoutbyothers() const {
  // @@protoc_insertion_point(field_get:cjLogin.LogoutUserRequest.logoutByOthers)
  return logoutbyothers_;
}
inline void LogoutUserRequest::set_logoutbyothers(bool value) {
  
  logoutbyothers_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.LogoutUserRequest.logoutByOthers)
}

// -------------------------------------------------------------------

// LogoutUserResponse

// .cjLogin.BaseResponse baseResp = 1;
inline bool LogoutUserResponse::has_baseresp() const {
  return this != internal_default_instance() && baseresp_ != NULL;
}
inline void LogoutUserResponse::clear_baseresp() {
  if (GetArenaNoVirtual() == NULL && baseresp_ != NULL) delete baseresp_;
  baseresp_ = NULL;
}
inline const ::cjLogin::BaseResponse& LogoutUserResponse::baseresp() const {
  const ::cjLogin::BaseResponse* p = baseresp_;
  // @@protoc_insertion_point(field_get:cjLogin.LogoutUserResponse.baseResp)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseResponse*>(
      &::cjLogin::_BaseResponse_default_instance_);
}
inline ::cjLogin::BaseResponse* LogoutUserResponse::mutable_baseresp() {
  
  if (baseresp_ == NULL) {
    baseresp_ = new ::cjLogin::BaseResponse;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.LogoutUserResponse.baseResp)
  return baseresp_;
}
inline ::cjLogin::BaseResponse* LogoutUserResponse::release_baseresp() {
  // @@protoc_insertion_point(field_release:cjLogin.LogoutUserResponse.baseResp)
  
  ::cjLogin::BaseResponse* temp = baseresp_;
  baseresp_ = NULL;
  return temp;
}
inline void LogoutUserResponse::set_allocated_baseresp(::cjLogin::BaseResponse* baseresp) {
  delete baseresp_;
  baseresp_ = baseresp;
  if (baseresp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.LogoutUserResponse.baseResp)
}

// -------------------------------------------------------------------

// ConnectRequest

// .cjLogin.BaseRequest baseReq = 1;
inline bool ConnectRequest::has_basereq() const {
  return this != internal_default_instance() && basereq_ != NULL;
}
inline void ConnectRequest::clear_basereq() {
  if (GetArenaNoVirtual() == NULL && basereq_ != NULL) delete basereq_;
  basereq_ = NULL;
}
inline const ::cjLogin::BaseRequest& ConnectRequest::basereq() const {
  const ::cjLogin::BaseRequest* p = basereq_;
  // @@protoc_insertion_point(field_get:cjLogin.ConnectRequest.baseReq)
  return p != NULL ? *p : *reinterpret_cast<const ::cjLogin::BaseRequest*>(
      &::cjLogin::_BaseRequest_default_instance_);
}
inline ::cjLogin::BaseRequest* ConnectRequest::mutable_basereq() {
  
  if (basereq_ == NULL) {
    basereq_ = new ::cjLogin::BaseRequest;
  }
  // @@protoc_insertion_point(field_mutable:cjLogin.ConnectRequest.baseReq)
  return basereq_;
}
inline ::cjLogin::BaseRequest* ConnectRequest::release_basereq() {
  // @@protoc_insertion_point(field_release:cjLogin.ConnectRequest.baseReq)
  
  ::cjLogin::BaseRequest* temp = basereq_;
  basereq_ = NULL;
  return temp;
}
inline void ConnectRequest::set_allocated_basereq(::cjLogin::BaseRequest* basereq) {
  delete basereq_;
  basereq_ = basereq;
  if (basereq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cjLogin.ConnectRequest.baseReq)
}

// -------------------------------------------------------------------

// ServerMessage

// .cjLogin.MessageType type = 1;
inline void ServerMessage::clear_type() {
  type_ = 0;
}
inline ::cjLogin::MessageType ServerMessage::type() const {
  // @@protoc_insertion_point(field_get:cjLogin.ServerMessage.type)
  return static_cast< ::cjLogin::MessageType >(type_);
}
inline void ServerMessage::set_type(::cjLogin::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cjLogin.ServerMessage.type)
}

// string content = 2;
inline void ServerMessage::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMessage::content() const {
  // @@protoc_insertion_point(field_get:cjLogin.ServerMessage.content)
  return content_.GetNoArena();
}
inline void ServerMessage::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cjLogin.ServerMessage.content)
}
#if LANG_CXX11
inline void ServerMessage::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cjLogin.ServerMessage.content)
}
#endif
inline void ServerMessage::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cjLogin.ServerMessage.content)
}
inline void ServerMessage::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cjLogin.ServerMessage.content)
}
inline ::std::string* ServerMessage::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:cjLogin.ServerMessage.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMessage::release_content() {
  // @@protoc_insertion_point(field_release:cjLogin.ServerMessage.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:cjLogin.ServerMessage.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace cjLogin

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cjLogin::ErrCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cjLogin::ErrCode>() {
  return ::cjLogin::ErrCode_descriptor();
}
template <> struct is_proto_enum< ::cjLogin::ActionCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cjLogin::ActionCode>() {
  return ::cjLogin::ActionCode_descriptor();
}
template <> struct is_proto_enum< ::cjLogin::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cjLogin::MessageType>() {
  return ::cjLogin::MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fcj_5flogin_2eproto__INCLUDED
